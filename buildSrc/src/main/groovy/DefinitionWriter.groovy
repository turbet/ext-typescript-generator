/**
 * Created with IntelliJ IDEA.
 * User: Administrator
 * Date: 5/22/13
 * Time: 12:50 AM
 * To change this template use File | Settings | File Templates.
 */
class DefinitionWriter {
	Config config
	File definitionFile
	File factoryDefinitionFile
	File factoryFile
	File configFile

	def init() {
		new File( config.outputPath ).deleteDir()
		new File( config.outputPath ).mkdir()

		//		definitionFile = new File( "${ config.outputPath }/${ config.libraryName }-${ config.libraryVersion }-${ config.useFullTyping ? 'Typed' : 'Untyped' }${ config.interfaceOnly ? '-Interfaces' : '' }.d.ts" )
		//		factoryFile = new File( "${ config.outputPath }/${ config.libraryName }-${ config.libraryVersion }-${ config.useFullTyping ? 'Typed' : 'Untyped' }${ config.interfaceOnly ? '-Interfaces' : '' }-factory.ts" )
		//		configFile = new File( "${ config.outputPath }/${ config.libraryName }-${ config.libraryVersion }-${ config.useFullTyping ? 'Typed' : 'Untyped' }${ config.interfaceOnly ? '-Interfaces' : '' }-config.d.ts" )

		definitionFile = new File( "${ config.outputPath }/extJS.d.ts" )
		factoryDefinitionFile = new File( "${ config.outputPath }/typext-factory.d.ts" )
		factoryFile = new File( "${ config.outputPath }/typext.ts" )
		configFile = new File( "${ config.outputPath }/typext-config.d.ts" )

		println "generating files : \n\t- " + definitionFile.absolutePath + "\n\t- " + factoryFile.absolutePath + 
			"\n\t- " + factoryDefinitionFile.absolutePath + "\n\t- " + configFile.absolutePath

		if( config.singleDefinition ) {
			definitionFile.write( "" )
			writeToDefinition( "// Type definitions for ${ config.libraryName } ${ config.libraryVersion }" )
			writeToDefinition( "// Forked Project: http://www.sencha.com/products/${ config.libraryName.toLowerCase() }/" )
			writeToDefinition( "// Groovy engine created by: Brian Kotek <https://github.com/brian428/>" )
			writeToDefinition( "// Groovy engine forked by: Jeremie Turbet <https://github.com/turbet/>" )
			writeToDefinition( "// Replace definitions: https://github.com/borisyankov/DefinitelyTyped" )
			writeToDefinition( "// " + new Date().format("yyyy-MMM-dd HH:mm:ss a") )
			writeToDefinition( "" )
			writeToDefinition( "///<reference path='./extJS-addon.d.ts'/>" )
			writeToDefinition( "" )
			
			writeToFactory( "// Factory for ${ config.libraryName } ${ config.libraryVersion }" )
			writeToFactory( "// Forked Project: http://www.sencha.com/products/${ config.libraryName.toLowerCase() }/" )
			writeToFactory( "// Generated by Jeremie Turbet @IPBS - Toulouse")
			writeToFactory( "// " + new Date().format("yyyy-MMM-dd HH:mm:ss a") )
			writeToFactory( "" )
			
			writeToFactoryDefinition( "// Factory definition filefor ${ config.libraryName } ${ config.libraryVersion }" )
			writeToFactoryDefinition( "// Forked Project: http://www.sencha.com/products/${ config.libraryName.toLowerCase() }/" )
			writeToFactoryDefinition( "// Generated by Jeremie Turbet @IPBS - Toulouse")
			writeToFactoryDefinition( "// " + new Date().format("yyyy-MMM-dd HH:mm:ss a") )
			writeToFactoryDefinition( "" )
			writeToFactoryDefinition( "///<reference path='./typext-config.d.ts'/>")
			writeToFactoryDefinition( "" )
			

			writeToConfig( "// Config for ${ config.libraryName } ${ config.libraryVersion }" )
			writeToConfig( "// Forked Project: http://www.sencha.com/products/${ config.libraryName.toLowerCase() }/" )
			writeToConfig( "// Generated by Jeremie Turbet @IPBS - Toulouse")
			writeToConfig( "// " + new Date().format("yyyy-MMM-dd HH:mm:ss a") )
			writeToConfig( "" )
		}

		if( config.libraryName != "ExtJS" && config.libraryName != "Touch" ) {
			writeToDefinition( "declare module Ext { export interface IBase {} }\n" )
		}
	}

	def writeToFactory( value ) {
		value = value.replaceAll( "(  ){1,100}", " " )
		//		println "Factory writer :\t\t\t\t |  " + value
		factoryFile.withWriterAppend( "UTF-8" ) { writer ->
			writer << value + "\n"
		}
	}

	def writeToFactoryDefinition( value ) {
		value = value.replaceAll( "(  ){1,100}", " " )
		//		println "Factory writer :\t\t\t\t |  " + value
		factoryDefinitionFile.withWriterAppend( "UTF-8" ) { writer ->
			writer << value + "\n"
		}
	}

	def writeToConfig( value ) {
		value = value.replaceAll( "(  ){1,100}", " " )
		//		println "Config writer :\t\t\t\t |  " + value
		configFile.withWriterAppend( "UTF-8" ) { writer ->
			writer << value + "\n"
		}
	}

	def writeToDefinition( value ) {
		value = value.replaceAll( "(  ){1,100}", " " )
		if( config.singleDefinition ) {
			definitionFile.withWriterAppend( "UTF-8" ) { writer ->
				writer << value + "\n"
			}
		}
		else {
			def currentDefinitionFile = new File( "${ config.outputPath }/${ config.currentModule }.d.ts" )
			if( !currentDefinitionFile.exists() ) currentDefinitionFile.createNewFile()

			currentDefinitionFile.withWriterAppend( "UTF-8" ) { writer ->
				writer << value + "\n"
			}
		}
	}

	def formatCommentText( comment ) {
		def result = ""
		if( comment ) result += comment.replaceAll("<(.|\n)*?>", "").replaceAll( "[\\n\\t]", " " )
		return result
	}
}
